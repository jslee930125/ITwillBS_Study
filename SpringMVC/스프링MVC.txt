스프링MVC.txt

 * JUnit4 -> JUnit5
  
  @Test : 테스트를 수행하는 메서드 위에 표시
    => 해당 메서드를 JUnit이 실행 (테스트 코드용으로 인식해서 테스트를 진행)
    
  @Before : 테스트를 수행하기 전에 미리 준비되어야 하는 동작을 수행하는 메서드 위에 표시  
  
  @After : 테스트 작업 후에 자동으로 실행하는 동작
  
  * 프로젝트 <-> MyBatis(효율적 연결을 도와주는 중간 단계) <-> DB(Mysql)
  			  (iBatis)
  
  * Spring 프로젝트 구분하기
  
  1) Presentation Layer(tier) : UI를 담당하는 영역(웹/모바일)
  	=> JSP/HTML/CSS/JS (View) + Controller
  
  2) Business Layer(tier) : 서비스 계층, 사용자의 요구사항을 반영하는 계층 (기존 ACTION 페이지가 하던 일)
  	=> Model
  	
  3) Data Access Layer(tier) : 영속 계층(persistence Layer), 데이터 처리(DB)
  	=> DB
  
  MyBatis : SQL Mapper 라이브러리(sql 쉽게쓸수 있도록 매핑해 놓은 라이브러리)
  			- try~Catch~finally	
  			- pstmt
  			- rs
  			=> 위 동작을 간결하고 효율적인 처리를 가능하게 해 줌
  			
  			* SQL구문 분리 운영(XML/애노테이션) - SQL을 따로 다른 파일로 빼놓게 함
  			* Spring과 자동 연동
  			* 동적 SQL을 사용가능 (SQL 안에 IF/FOR문)
  			
  			MyBatis : SQL 라이브러리(프레임워크)
  			MyBatis - Spring : Spring과 MyBatis를 연결하는 객체
  			spring-jdbc : spring에서 jdbc를 사용 객체
  			spring-test : spring-MyBatis 연결 확인 테스트 객체
  			
  * MyBatis 연결
  	Spring(DataSource) - MyBatis - Mysql
  	
  	* SqlSessionFactory 객체 : 디비연결(Connection 생성), SQL 처리
  	 -> 객체를 직접 만들 수 없음
  	 -> SqlSessionFactoryBean 클래스를 통해서 사용 
  	 
  * MVC 구조 - 모델2
  => 스프링 MVC 패턴(Front Controller 패턴)
     컨트롤러 위임이 적용된 패턴
  
  => Front Controller <-> Controller <-> Model (컨트롤러의 분리, 위임)
  		   |
  	      View
  
  * 스프링 MVC 제공기능
  - URI를 분석해서 적절한 컨트롤러 연결
  - 컨트롤러에 필요한 메서드 호출
  - 컨트롤러 결과를 뷰 페이지로 전달
  - 적절한 뷰 페이지 연결
  - 파라미터 값의 수집
  - 애너테이션을 통한 간편한 설정
  
  * 개발자가 직접 구현해야하는 기능
  - 특정 URI에 동작하는 컨트롤러 생성
  - 서비스 객체를 생성 (비지니스 로직 구현 객체 - JSP모델 ACTION에 해당)
  - DAO 객체 생성
  - 컨트롤러에 처리되는 결과를 실행하는 메서드 구현
  - 뷰에서 전달받은 데이터 출력
  
  
 * 스프링 + MyBatis
 
  1) XML 사용해서 SQL 구문 작성, DAO파일에서는 실행코드를 찾아서 호출 
     장점 : xml파일에 SQL구문을 처리 (코드분리) / SQL 수정 및 유지보수가 좋음 
     단점 : 개발코드의 양이 많아짐. 복잡도가 증가
     
  2) 애너테이션을 사용한 (인터페이스) SQL구문 사용
     장점 : 별도의 DAO파일이 없이 구문 실행 가능 => 생산성 증가
     단점 : SQL 쿼리를 변경시 마다 컴파일을 수행
  
  3) XML코드와 애너테이션을 같이 사용
  	 장점 : 간단한 SQL문은 애너테이션으로 사용, 복잡한 SQL구문은 XML파일로 처리 
  	 단점 : 개발자의 능력의 차이가 발생할 수 있음.(누군가는 쉽다고 생각한 구문이 누군가에게는 어려운 구문일 수 있음)
  	 
  * MyBatis 동작 수행순서
   - DB 테이블 생성 (+설정)
   - 도메인 객체를 설계 & 클래스 작성 (중요한 역할을 하는 명사 = 도메인, DTO객체가 도메인 객체)
   - DAO 인터페이스 설계 
   - 실행동작을 추상메서드로 구현 
   - XML Mapper 생성 & SQL구문 작성
   - MyBatis에서 작성된 설정값이 XML Mapper을 인식 설정
   		- XML Mapper 저장경로 설정
   		- DTD 추가
   		- SQL 구문 작성
   - DAO 객체를 생성
   - 스프링에서 사용
   
   * 도메인(domain) : 개발을 진행할 때 핵심적인 용어(명사)
   	ex) 쇼핑몰 -> 회원, 상품, 주문, 배송, 이벤트 ... (1차 도메인)
   			 -> 회원 - 가입, 수정, 탈퇴, ... (2차 도메인)
   			 	(도메인이 명확할 수록 기능 구현이 쉬워진다.)
   		
   		=> 물리적으로 구분이 가능한 단위 => DB테이블을 분리해서 사용가능여부
   		
   	* SqlSessionTemplate 객체 (MyBatis-spring 라이브러리에 포함되어 있음)
		: MyBatis와 DAO를 사용하기 위한 객체   		
		- 디비연결, 자원해제 대신 처리해주는 객체
		- 기본적인 처리의 안정성 향상
		
	* MyBatis - 구문
	
		#{} : SQL 구문에 들어가는 ?값을 넣는 역할 (get()/set())
			- 전달 값이 1개 이면서, 기본형타입, 문자열일때는 알아서 형변환
			- PreparedStatement 객체에 정보를 다루는 문법
		
		${} : SQL 구문에 들어가는 ?값을 넣는 역할 (get()/set())
			- Statement 객체에 정보를 다루는 문법 (잘 쓰지 않음 - sql injection 위험)
			=> 동적 SQL 구문을 사용할 때 사용
			
	
	* 비지니스 계층 (서비스 계층)
	  => 사용자의 요구사항을 구현하는 계층
	  => 서비스 인터페이스 -> 구현 객체
	  - DAO와 컨트롤러의 연결(접착제)
	  - 컨트롤러에 메인 로직이 종속적이지 않도록 개발(영속계층-DAO 컨트롤러랑 1:1 대응하지 않도록 만드는 것이 비지니스 계층이다.)
	    (컨트롤러와 디비를 강한결합으로 연결하지 않도록, 연결은 되어있지만 )
	  
	* 컨트롤러 (프리젠테이션 계층)
	=> 컨트롤러 + 뷰 처리 계층 (50%~)
	
	- 공통의 URI주소 (ex) *.me, *.go 이제 이거 대신에 /member/~ /board/~ (가상주소를 폴더의 형태로 만들 것)
	- 각 기능별 URI주소 
	- 각 기능별 호출방식(get/post)
	- 결과 처리, 리다이렉트 처리
	- 예외 처리
	
	* 각 기능별 호출방식(get/post)
	GET방식 : 정보입력, 페이지 요청, 정보 조회
	POST방식 : 데이터 처리
	
	 
	 
	
	
 	  	
		
	
   	
   	
   
  
 
 
 
 