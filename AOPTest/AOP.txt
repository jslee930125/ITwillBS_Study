AOP.txt
관점 지향 프로그래밍(AOP, Aspect Oriented Programming)
 : 동작(메서드)안에 있는 주기능과 보조기능을 분리 후 선택적으로 사용하는 것
  전체 코드에 있는 보조기능(보안코드)을 하나의 공간에 따로 분리해서 관리 가능
  => 주기능은 주기능 형태만 구현, 보조기능은 보조기능만 구현
  => 코드가 단순, 가독성이 증가 => 모듈화 
  
  * AOP 관련 용어
  
  ** aspect : 구현하고자 하는 보조기능
  ** advice : aspect의 실체(클래스) /  메서드호출을 기준으로 여러지점에서 사용가능
  ** joinpoint : advice를 적용하는 지점 (스프링 - 메서드 결합점 제공)
  ** pointcut : advice가 적용되는 대상을 지정 (패키지명/클래스명/메서드명을 정규식표현)
  ** target : advice가 적용되는 클래스
  ** weaving : advice를 주기능에 적용시키는것
  
  * AOP - 스프링에서 제공하는 API를 사용, @Aspect 애너테이션을 사용
  
  * AOP 기능 구현하기
  1) 타겟(target)을 지정한다. (주기능을 수행하는 클래스)
  2) 어드바이스(advice)를 지정한다.
  3) 설정 파일에서 포인트컷을 지정(Pointcut) 설정
  4) 설정 파일에서 어드바이스와 포인트컷을 연결하는 어드바이저를 생성
  5) 설정 파일에서 스프링의 ProxyFactoryBean 클래스를 사용해서 타겟에 어드바이스 설정
  6) getBean()를 사용한 객체 접근
  
  
  * 스프링 API에서 제공되는 Advice 메서드 종류
   - before() : 해당 메서드가 실행되기 전에 실행
   - afterReturning() : 해당 메서드가 실행 후 실행
   - afterThrowing() : 해당 메서드가 예외 발생시 실행
   - invoke() : 해당 메서드의 실행 전/후, 예외 발생시 실행
   
   
   
   
   
   
   
   
  
  
  
  
  
  
  
  
  
  
  
  
 