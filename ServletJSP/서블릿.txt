서블릿.txt

JavaEE (Java Enterprise Edition)
 => java SE + 서블릿/JSP/JSTL/JTA/EJB 을 포함하는 자바
 
 
JSP (Java Server Page)
 => 클라이언트의 요청을 처리하고 결과를 동적인 페이지로 처리하는 기술
  
                                                              서블릿
  tomcat [ JSP   -> 실행  -> {.java -> .class} ]  => 클라이언트 사용
   (WAS)
   컨터이너 
   

* JSP 페이지의 등장 배경
    [서블릿에서 html 페이지 출력]
	response.setContentType("text/html; charset=UTF-8");
	PrintWriter out = response.getWriter();
	out.println("<html>");
	out.println("<head>");
	out.println("</head>");
	out.println("<body>");
	out.println(" <h1> 서블릿 웹페이지 </h1> ");
	out.println("</body>");
	out.println("</html>");
    out.close();  

=> HTML코드도 컴파일이 필요해졌기때문에 JSP페이지를 탄생시킴


** 서블릿 : 사용자의 요청을 전달받아서 동적으로 처리하는 방법 (멀티쓰레드 사용)
 
  * 사용규칙
    1) javax.servlet.Servlet 인터페이스를 구현해야함.
    2) 1번 인터페이스를 구현하기 어렵다면, 
       javax.servlet.http.HttpServlet 클래스를 상속.
    3) doGet/doPost와 같은 메서드를 구현 
       [javax.servlet.http.HttpServletRequest,   
       javax.servlet.http.HttpServletResponse]   
             두개의 데이터를 파라미터로 전달 받아야한다. (순서체크)
    4) 예외처리를 해야함  java.io.IOException,javax.servlet.ServletException 
    
    5) web.xml(배포서술자) 통해서 서블릿을 매핑 (서블릿 3.0이상은 선택사항)
       @WebServlet()활용가능 (서블릿 3.0 이상)         
     

  * JSP -> Servlet 변환 규칙
  
  1) JSP 스크립틀릿 ( <%  %> ) : 서블릿안에 있는 service()메서드
  2) JSP 표현식 ( <%=  %> ) : 서블릿안에 있는 service()- out.print()변환
  3) JSP 선언문 ( <%!  %> ) : 서블릿 안에 멤버(변수,메서드)로 생성
  4) JSP 일반HTML : 서블릿안에 있는 service()- out.write()변환
  
  D:\workspace_jsp5\.metadata\.plugins\org.eclipse.wst.server.core
  \tmp0\work\Catalina\localhost\프로젝트\~
  
  
  
  
  
  
  
  
