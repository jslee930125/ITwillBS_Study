스프링게시판.txt


 * DB관련 준비
  - 관련DB(계정) 생성
  - 테이블 설계, 테이블 생성
  - 더미데이터 준비 (선택사항)
  
 * 스프링 MVC
  -  패키지 구조 결정(동작 구분)
  - 개발의 역활 구분
  - 테스트 파트를 구분
  
 * 화면 view
   - 경로 설정
   - JSP / html + js  / ....
   
   
   
   CREATE TABLE `springdb`.`tbl_board` (
  `bno` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(200) NOT NULL,
  `content` TEXT NOT NULL,
  `writer` VARCHAR(45) NOT NULL,
  `regdate` TIMESTAMP NOT NULL DEFAULT now(),
  `viewcnt` INT NULL DEFAULT 0,
  PRIMARY KEY (`bno`));
    
   
    <!-- Bootstrap 3.3.4 -->
    <link href="./resources/bootstrap/css/bootstrap  ~~~>
   =>    src/main/webapp/resources/bootstrap/css/bootstrap  ~~~
    
     <!-- Theme style -->
    <link href="${pageContext.request.contextPath }/resources/dist/~~~~~>   
    
    => 프로젝트 정보안에 요청정보(request)에 들어있는 프로젝트 경로  
      el표현식 내장객체를 사용해서 접근
      
      
  
  *  프로젝트 주소
     http://localhost:8088/Model2/Main.me 
     http://localhost:8088/Model2/BoardList.bo 
      
      
     http://localhost:8088/controller/join
     -> 프로젝트의 패키지 가장 마지막이름 사용(프로젝트주소)
     => 하나의 서버에 여러개의 프로젝트를 실행시 사용 
     
     
     http://localhost:8088/join
     ->  프로젝트 주소(contextPath)를 /(root)로 사용
     =>  서버에 하나의 프로젝트만 운용해야함
     
     
     
   * mapper에서 기본적인 SQL 구문은 <insert><select><update><delete>
   - 공통의 sql구문은 <sql> 작성 후 <include> 형태로 추가 사용
   
   
  <insert id="">
  
     <include refid="w"></include>
  </insert>
  
  <sql id="w">
     //where userid = 'admin';
     <if test="비교구문">SQL문</if>
     
  </sql>
   
     
     
   * mapper 리턴타입 별명 설정하기  
   https://mybatis.org/mybatis-3/ko/configuration.html#typeAliases
   
     
      
      
  * Log4j 로그를 출력해주는 객체
   
   로그정보를 출력하는 레벨의 정보에 따라서 화면(콘솔창에 출력)
   
   DEBUG < INFO < WARN < ERROR  
   
   (저)					 (고)
       
   => 고 레벨로 갈수록 반드시 출력 , 저 레벨 갈수록 출력을 안해도됨
   
   
   D:\workspace_STS\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\logs
   
 
 
 * 예외처리
	
	- Controller를 사용해서 예외를 처리
	 (@ExceptionHandler/@ControllerAdvice/@ResponseStatus등을 활용)
	 
	@ControllerAdvice
	예외를 처리하는 컨트롤러 (메서드에서 발생하는 모든 예외를 처리)   
 
     
  *  페이징 처리
      ->서비스,영속 계층 사이의 처리 
      
      1) url을 사용한 특정 페이지 출력
      2) DB에서 페이징처리가 완료된 데이터를 출력
      3) 페이지 하단부 페이지 숫자 링크 처리
      4) 페이징처리 이후에는 다시 원래페이지 이동
      
      
   - a 태그를 사용한 페이징 처리 
     =>  검색엔진의 노출이 매우 쉽다. ( html 파싱 -> 연결된 모든정보를 확인가능 )
     
   - form 태그를 사용한 페이징 처리  
     =>  간결한 데이터 처리, 최소한의 정보를 사용한 페이징처리 ( JS ) 
   
   - 페이징처리 규칙
     
     1) 페이징처리는 항상 GET방식으로 처리!
     2) URL을 사용해서 정보를 전달
     3) 페이징처리 완료후에는 항상 '목록으로가기' 버튼이 필요함.
     4) 처리 페이지가 3페이지 였을때, 동작후 다시 3페이지로 이동
     5) 반드시 페이지정보를 제공해야함
     
  
  * 시작페이지 : startPage
     = > startPage = 끝페이지 - 페이지 번호 +1
     
  * 끝페이지 : endPage
     =>  endPage = 현재 페이지번호/페이지 번호의 수 * 페이지 개수
     
     //   3페이지 -> 10페이지
     //  10페이지 -> 20페이지
     
  * 전체 데이터 개수 : totalCount
  * 이전 : prev
  * 다음 : next
  
  
      
      
  
  
    