스프링.txt

- Spring Legacy 방식 (우리가 사용)
   => MVC 방식(model2방식), Tomcat(WAS를 사용해본 경험)
   WAS 에러대처 능력여부
   
   대부분의 개발형태(현재 실무) => 다양한 자료가 제공(구글링이 쉽다)
   기존의 프로젝트 이해가 쉽다.
   모든 버전의 스프링을 사용가능
   
   * 초반 개발환경 및 테스트 환경 구성이 어렵다.
   * WAS 사용하여 처리하기 때문에 많은 리소스가 필요함. (무겁다)

- Spring boot 방식
  => MVC 방식, 자체 서버가 있음, 간결한 설정 및 실행
  
  별도의 설정이 필요 없음.
  WAS가 없이 실행가능 => 로딩시간이 짧다 테스트 편리하다.(가볍다)
  
  * 기존의 형태와 완전하게 다른 형태로 처리
  * JSP뷰 페이지의 처리가 별도로 필요
  
  * 프레임워크(Framework) - 제이쿼리, 안드로이드, 스프링 등
  : 어떤 것을 구성하는 구조, 뼈대, 틀
  : 누가 개발하든 틀에 맞춰서만 잘 조립하면 실행하는데 문제가 없게 된다. 그래서 사용
  => SW적 프레임워크: 기능을 미리 클래스 또는 인터페이스로 만들어서 제공하는 형태
				   (어느정도 완성된 상태의 기능)
  => 스프링 프레임워크 (자바 웹 애플리케이션 개발을 위한 오픈소스 프레임워크)
  	 (경량 프레임워크 = 경량 컨테이너(서블릿 컨테이너))
  	 *(서블릿) 컨테이너 : 생성, 초기화, 실행, 소멸 등의 모든 기능을 관리하는 것
  	 
  	 * EJB (Enterprise JAVABean) => 규모가 큰 형태의 프레임 워크 (무겁고 느림)
  	 							 => 너무 느리고 처리가 어렵다.
  	 							 => 스피링이 주목 받게 됨 
  	 
  	 * 스프링의 특징
  	 1) EJB 보다 가볍고, 학습하기 쉬운 경량 컨테이너
  	 2) 제어의 역행(IoC, Inversion of Control)이라는 기술을 사용해서 애플리케이션 간의 느슨한 결합을 제어
  	 3) 의존성 주입(DI, Dependency Injection) 기능
  	 4) 관점지향 프로그래밍(AOP, Aspect Oriented Programming) 기능(나는 내 코드에만 집중, 보안, 로그 등의 그 외 기능은 스프링이 대신 해 주는 것)
  	 5) 영속성(Persistence)과 관련된 다양한 기능 제공 (DB관련 기능 - MYBatis)
  	 6) 다양한 라이브러리 지원
  	 
  	 * 스프링의 핵심 개념
  	 POJO(Plain of java Object 순수 자바 개념 <-> 서블릿 개념) 방식 객체, 의존성 주입(DI), 제어의 역행(IoC), 관점지향 프로그래밍(AOP), 경량컨테이너
  	 
  	 
  	 * 제어의 역행 : 객체, 메서드 호출작업을 개발자가 결정하는 게 아니라, 외부에서 결정하는 형태
  	 	(부품 끼워넣기) (컴퓨터 조립 시 렘을 직접만드는게 아니라 렘을 사서 끼우는 것)
  	 	
  	 * 의존성 주입 : 제어의 역행이 발생시 스프링 내부에 있는 객체를 관리하는 기능
  	 				(램을 사서 끼우면 렘이 있어야만 작동가능해 짐)
  	 				 의존관계에 있는 객체들이 제어의 역행으로 주입되는 것
  	 	- 의존성(Dependency) : 어떤 객체가 혼자서 처리할 수 없다. 반드시 다른 객체가 있어야 한다.
  	 	  					  특정 객체에 의존적이다.
  	 	 1) 생성자를 사용한 의존 주입
  	 	 2) set()을 사용한 의존 주입
  	 	 
  	 	 
  	 * 강한 결합 / 약한(느슨한) 결합
  	 
  	 : 결합이 강하다 => 관계가 깊다 => 관련된 정보들이 많다. (비효율적)
  	 : 결합이 약하다 => 관계가 좁다 => 관련된 정보들이 적다. (적을수록 좋다. 그렇다고 연결이 끊기면 안 됨)
  	 : 자바의 궁극적인 목표는 약한 결합(제어의 역행)을 통해서 의존성 주입을 하는 것
  	 
  	 => 둘 다 관계가 있다. (연관성이 있다.)
  	 
  	 * 스프링의 주요 기능
  	  - Core : 다른 기능과 설정들을 분리하기 위한 IoC 기능을 제공
  	  - Context : 스프링의 기능기능, 각 기능을 하는 애플리케이션 객체(빈Bean) 접근방법 제어
  	  - DAO : JDBC 기능을 조금 더 편리하게 제공
  	  - ORM : 하이버네이트, 마이바티스 등과 같은 영속성관련 프레임워크 연동 지원
  	  - AOP : 관점 지향 프로그래밍 지원
  	  - Web : 웹 개발에 필요한 기능을 제공
  	  - WebMVC : 스프링 MVC애 필요한 기능을 제공
  	  
  	  * Maven vs Gradle
  	  => 빌드도구 : 개발을 쉽게 할 수 있도록 도와주는 도구
  	  
  	 
  	 	  					  
  	 
				   
				     
  
  
