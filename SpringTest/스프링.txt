스프링.txt

 - Spring Legacy 방식 
   => MVC방식(model2방식), Tomcat(WAS를 사용해본 경혐)
      WAS 에러대처 능력여부
      
          대부분의 개발형태(현재 실무) => 다양한 자료가 제공
          기존의 프로젝트 이해가 쉽다.
          모든 버전의 스프링을 사용가능
          
     * 초반 개발환경 및 테스트 환경 구성이 어렵다.
     * WAS를 사용하여 처리 하기 때문에 많은 리소스가 필요함. (무겁다)        
    
 - Spring boot 방식
   => MVC 방식, 자체 서버가 있음
           간결한 설정 및 실행
    
         별도의 설정이 필요 없음.
     WAS가 없이 실행가능 => 로딩시간이 짧다 테스트 편리하다 (가볍다)
     
     * 기존의 형태와 완전하게 다른 형태로 처리
     * JSP뷰 페이지의 처리가 별도
     
 
 
 * 프레임워크(Framework) : 어떤 것을 구성하는 구조,뼈대,틀
   => SW적 프레임워크 : 기능을 미리 클래스또는 인터페이스로 만들어서 제공하는형태 
                    (어느정도 완성된 상태의 기능)
   => 스프링 프레임워크 (자바 웹 애플리케이션 개발을 위한 오픈소스 프레임워크)
     ( 경량 프레임워크 = 경량 컨테이너 )
     *(서블릿) 컨테이너 : 생성,초기화,실행,소멸 등의 모든기능을 관리하는 것
     
  
   * EJB => 너무 느리고 처리가 어렵다.
            
            
                          
  * 스프링의 특징
   1) EJB가볍고, 학습하기 쉬운 경량 컨테이너
   2) 제어의 역행(IoC,Inversion of Control)이라는 기술을 사용해서
           애플리케이션 간의 느스한 결합을 제어
   3) 의존성 주입(DI, Dependency Injection) 기능
   4) 관점지향 프로그래밍(AOP, Aspect Oriented Programming) 기능
   5) 영속성(persistence) 과 관련된 다양한 기능 제공 (DB관련기능- MyBatis)
   6) 다양한 라이브러리 지원
   
  * 스프링의 핵심 개념
    POJO방식 객체, 의존성주입(DI), 제어역행(Ioc),
       관점지향프로그래밍 (AOP),경량컨테이너  
   
  
  * 제어의 역행 : 객체,메서드등의 호출작업을 개발자가 결정 X, 외부에서 결정 O
     (부품 끼워넣기)  
     
  * 의존성 주입 : 제어의 역행이 발생시  스프링내부에 있는 객체를 관리하는 기능
   - 의존성(Dependency) : 어떤 객체가 혼자서 처리할수 없다. 반드시 다른 객체가 있어야한다.
          특정객체에 의존적이다.
     1) 생성자를 사용한 의존주입
     2) set()를 사용한 의존주입      
      
     
  * 강한 결합 / 약한 결합
   - 결합이 강하다 => 관계가 깊다 => 관련된 정보들이 많다.
   - 결합이 약하다 => 관계가 좁다 => 관련된 정보들이 적다.
   
   => 둘다 관계가 있다. (연관성이 있다)
   
  
  * 스프링 주요 기능
   - Core : 다른 기능과 설정들을 분리하기위한 IoC기능을 제공
   - Context : 스프링의 기본기능, 각 기능을 하는 애플리케이션 객체(빈Bean) 접근방법제어                             
   - DAO : JDBC기능을 조금더 편리하게 제공
   - ORM : 하이버네이트,마이바티스 등과 같은 영속성관련 프레임워크 연동
   - AOP : 관점 지향 프로그래밍 지원
   - Web : 웹 개발에 필요한 기능
   - WebMVC : 스프링 MVC에 필요한 기능을 제공
   
         
      
   * Maven vs Gradle
     => 빌드도구 : 개발을 쉽게 할 수 있도록 도와주는 도구
     
      
      
             
           
           
           
 
 